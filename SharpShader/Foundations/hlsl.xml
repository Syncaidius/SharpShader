<?xml version="1.0" encoding="utf-8" ?>
<Lexicon language="HLSL">
  <!-- Words-->
  <Word type="SharpShader.IVector`1" intrinsic="true">
    <Generic type="System.Int32" name="int" />
    <Generic type="System.UInt32" name="uint" />
    <Generic type="System.Single" name="float" />
    <Generic type="System.Double" name="double" />
    <Generic type="System.Boolean" name="bool" />
  </Word>
  <Word type="SharpShader.IMatrix`1" uniformSizeIsSingular="false">
    <Generic type="System.Int32" name="int" />
    <Generic type="System.UInt32" name="uint" />
    <Generic type="System.Single" name="float" />
    <Generic type="System.Double" name="double" />
    <Generic type="System.Boolean" name="bool" />
  </Word>
  <Word type="SharpShader.TextureSampler" name="SamplerState" />
  <Word type="SharpShader.TextureSampler1D" name="SamplerState" />
  <Word type="SharpShader.TextureSampler2D" name="SamplerState" />
  <Word type="SharpShader.TextureSampler3D" name="SamplerState" />

  
  <!-- Modifiers-->
  <Modifier name="const static">
    <Requirement csharp="readonly" />
    <Requirement csharp="static" />
  </Modifier>
  <Modifier name="const static">
    <Requirement csharp="readonly" />
  </Modifier>
  <Modifier name="static">
    <Requirement csharp="static" />
  </Modifier>
  <Modifier name="#define">
    <Requirement csharp="const" />
  </Modifier>
  
  
  <!-- Intrinsic functions-->
  <Intrinsic name="abort">
    <summary>Submits an error message to the information queue and terminates the current draw or dispatch call being executed.</summary>
  </Intrinsic>
  
  <Intrinsic name="abs">
    <summary>Returns the absolute value of the specified value.</summary>
    <call>
      <param type="System.Int32" name="x"/>
      <return type="System.Int32"/>
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" />
      <return generic="T"/>
    </call>
  </Intrinsic>
  
  <Intrinsic name="acos">
    <summary>Returns the arccosine of the specified value.</summary>
    <call>      
      <param type="System.Single" name="x"/>
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T"/>
      <param generic="T" />
      <return generic="T"/>
    </call>
  </Intrinsic>
  
  <Intrinsic name="all">
    <summary>Determines if all components of the specified value are non-zero.</summary>
    <call>      
      <param type="System.Int32" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Boolean" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name ="x"/>
      <return type="System.Boolean"/>
    </call>
  </Intrinsic>
  
  <Intrinsic name="AllMemoryBarrier">
    <summary>Blocks execution of all threads in a group until all memory accesses have been completed.</summary>
    <version pipeline="compute" min="5.0" />
  </Intrinsic>

  <Intrinsic name="AllMemoryBarrierWithGroupSync">
    <summary>Blocks execution of all threads in a group until all memory accesses have been completed and all threads in the group have reached this call.</summary>
  </Intrinsic>

  <Intrinsic name="any">
    <summary>Determines if any components of the specified value are non-zero.</summary>
    <call>      
      <param type="System.Int32" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Boolean" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return type="System.Boolean"/>
    </call>  
  </Intrinsic>
  
  <Intrinsic name="asdouble" csharp="AsDouble">
    <summary>Reinterprets a cast value (two 32-bit values) into a double.</summary>
    <call>      
      <param type="System.UInt32" name="lowBits"/>
      <param type="System.UInt32" name="highBits"/>
      <return type="System.Double" />
    </call>
  </Intrinsic>
  
  <Intrinsic name="asfloat" csharp="AsFloat">
    <summary>Interprets the bit pattern of x as a floating-point number.</summary>
    <call>
      <param type="System.UInt32" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="asin">
    <summary>Returns the arcsine of the specified value.</summary>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T"/>
      <param generic="T" />
      <return generic="T"/>
    </call>
  </Intrinsic>

  <Intrinsic name="asint" csharp="AsInt">
    <summary>Interprets the bit pattern of x as an integer.</summary>
    <call>
      <param type="System.UInt32" name="x"/>
      <return type="System.Int32" />
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="asuint" csharp="AsUInt">
    <summary>Interprets the bit pattern of x as an unsigned integer, or reinterprets the bit pattern of a double as two unsigned 32-bit integers.</summary>
    <call>
      <param type="System.Int32" name="x"/>
      <return type="System.UInt32" />
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.UInt32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
    <call>
      <param type="System.Double" name="x"/>
      <out type="System.UInt32" name="lowBits"/>
      <out type="System.UInt32" name="highBits"/>
    </call>
  </Intrinsic>

  <Intrinsic name="atan">
    <summary>Returns the arctangent of the specified value.</summary>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="atan2">
    <summary>Returns the arctangent of two values (x,y).</summary>
    <call>
      <param type="System.Single" name="y"/>
      <param type="System.Single" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Single" name="y"/>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="ceil">
    <summary>Returns the smallest integer value that is greater than or equal to the specified value.</summary>
    <call>
      <param type="System.Single" name ="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="CheckAccessFullyMapped">
    <summary>Determines whether all values from a Sample, Gather, or Load operation accessed mapped tiles in a tiled resource.</summary>
    <param type="System.UInt32" name="status" />
    <return type="System.Boolean" />
  </Intrinsic>

  <Intrinsic name="clamp">
    <summary>Clamps the specified value to the specified minimum and maximum range.</summary>
    <call>
      <param type="System.Single" name="x"/>
      <param type="System.Single" name="min" />
      <param type="System.Single" name="max" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="x"/>
      <param type="System.Int32" name="min" />
      <param type="System.Int32" name="max" />
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T" />
      <param generic="T" name="x"/>
      <param generic="T" name="min" />
      <param generic="T" name="max" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="clip">
    <summary>Discards the current pixel if the specified value is less than zero.</summary>
    <call>
      <param type="System.Single" name="x" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T" />
      <param generic="T" name="x" />
    </call>
  </Intrinsic>

  <Intrinsic name="cos">
    <summary>Returns the cosine of the specified value.</summary>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="cosh" csharp="CosH">
    <summary>Returns the hyperbolic cosine of the specified value.</summary>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="countbits" csharp="CountBits">
    <summary>Counts the number of bits (per component) in the input integer.</summary>
    <call>
      <param type="System.UInt32" name="x"/>
      <return type="System.UInt32" />
    </call>
    <call>
      <param type="SharpShader.UInt2" name="x"/>
      <return type="SharpShader.UInt2" />
    </call>
    <call>
      <param type="SharpShader.UInt3" name="x"/>
      <return type="SharpShader.UInt3" />
    </call>
    <call>
      <param type="SharpShader.UInt4" name="x"/>
      <return type="SharpShader.UInt4" />
    </call>
  </Intrinsic>

  <Intrinsic name="cross">
    <summary>Returns the cross product of two floating-point, 3D vectors.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="D3DCOLORtoUBYTE4" csharp="D3dColorToUByte4">
    <summary> Converts a floating-point, 4D vector set by a D3DCOLOR to a UBYTE4 (a UInt32). I can be used to swizzle and scale components of the x parameter. Use this function to compensate for the lack of UBYTE4 support in some hardware.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="x"/>
      <return type="System.UInt32" />
    </call>
  </Intrinsic>

  <Intrinsic name="ddx">
    <summary>Returns the partial derivative of the specified value with respect to the screen-space x-coordinate. This function is only supported in pixel shaders.</summary>
    <call>
      <param type="System.Single" name ="value" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name ="T"/>
      <param generic="T" name ="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="ddx_coarse" csharp="DdxCourse">
    <summary>Computes a low precision partial derivative with respect to the screen-space x-coordinate.</summary>
    <call>
      <param type="System.Single" name ="value" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="SharpShader.Vector2" name ="value" />
      <return type="SharpShader.Vector2" />
    </call>
    <call>
      <param type="SharpShader.Vector3" name ="value" />
      <return type="SharpShader.Vector3" />
    </call>
    <call>
      <param type="SharpShader.Vector4" name ="value" />
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="ddx_fine" csharp="DdxFine">
    <summary>Computes a high precision partial derivative with respect to the screen-space x-coordinate.</summary>
    <call>
      <param type="System.Single" name ="value" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="SharpShader.Vector2" name ="value" />
      <return type="SharpShader.Vector2" />
    </call>
    <call>
      <param type="SharpShader.Vector3" name ="value" />
      <return type="SharpShader.Vector3" />
    </call>
    <call>
      <param type="SharpShader.Vector4" name ="value" />
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="ddy">
    <summary>Returns the partial derivative of the specified value with respect to the screen-space y-coordinate. This function is only supported in pixel shaders.</summary>
    <call>
      <param type="System.Single" name ="value" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name ="T"/>
      <param generic="T" name ="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="ddy_coarse" csharp="DdyCourse">
    <summary>Computes a low precision partial derivative with respect to the screen-space y-coordinate.</summary>
    <call>
      <param type="System.Single" name ="value" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="SharpShader.Vector2" name ="value" />
      <return type="SharpShader.Vector2" />
    </call>
    <call>
      <param type="SharpShader.Vector3" name ="value" />
      <return type="SharpShader.Vector3" />
    </call>
    <call>
      <param type="SharpShader.Vector4" name ="value" />
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="ddy_fine" csharp="DdyFine">
    <summary>Computes a high precision partial derivative with respect to the screen-space y-coordinate.</summary>
    <call>
      <param type="System.Single" name ="value" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="SharpShader.Vector2" name ="value" />
      <return type="SharpShader.Vector2" />
    </call>
    <call>
      <param type="SharpShader.Vector3" name ="value" />
      <return type="SharpShader.Vector3" />
    </call>
    <call>
      <param type="SharpShader.Vector4" name ="value" />
      <return type="SharpShader.Vector4" />
    </call> 
  </Intrinsic>

  <Intrinsic name="degrees">
    <summary>Converts the specified value from radians to degrees.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="determinant">
    <summary>Returns the determinant of the specified floating-point, square matrix.</summary>
    <call>
      <generic type="SharpShader.IMatrix[Single]" name="T" />
      <param generic="T" name="m"/>
      <return type="System.Single" />
    </call>
  </Intrinsic>

  <Intrinsic name="DeviceMemoryBarrier">
    <summary>Blocks execution of all threads in a group until all device memory accesses have been completed.</summary>
  </Intrinsic>

  <Intrinsic name="DeviceMemoryBarrierWithGroupSync">
    <summary>Blocks execution of all threads in a group until all device memory accesses have been completed and all threads in the group have reached this call.</summary>
  </Intrinsic>

  <Intrinsic name="distance">
    <summary>Returns a distance scalar between two vectors.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <return type="System.Single" />
    </call>
  </Intrinsic>

  <Intrinsic name="dot">
    <summary>Returns the dot product of two vectors.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="SharpShader.Int2" name="x" />
      <param type="SharpShader.Int2" name="y" />
      <return type="SharpShader.Int2" />
    </call>
    <call>
      <param type="SharpShader.Int3" name="x" />
      <param type="SharpShader.Int3" name="y" />
      <return type="SharpShader.Int32" />
    </call>
    <call>
      <param type="SharpShader.Int4" name="x" />
      <param type="SharpShader.Int4" name="y" />
      <return type="SharpShader.Int32" />
    </call>
  </Intrinsic>

  <Intrinsic name="dst">
    <summary>Calculates a distance vector. This intrinsic function provides the same functionality as the Vertex Shader instruction dst.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="errorf">
    <summary>Submits an error message to the information queue.</summary>
    <remarks>This operation does nothing on devices that do not support it.</remarks>
    <call>
      <param type="System.String" name="format" />
      <param type="System.Object" name="args" params="true" />
    </call>
  </Intrinsic>

  <Intrinsic name="EvaluateAttributeAtCentroid">
    <summary>Evaluates at the pixel centroid. TODO: NOT IMPLEMENTED.</summary>
  </Intrinsic>

  <Intrinsic name="EvaluateAttributeAtSample">
    <summary>Evaluates at the indexed sample location. TODO: NOT IMPLEMENTED.</summary>
  </Intrinsic>

  <Intrinsic name="EvaluateAttributeSnapped">
    <summary>Evaluates at the pixel centroid with an offset. TODO: NOT IMPLEMENTED.</summary>
  </Intrinsic>

  <Intrinsic name="exp">
    <summary>Returns the base-e exponential, or ex, of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="exp2">
    <summary>Returns the base 2 exponential, or 2x, of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="f16tof32" csharp="F16toF32">
    <summary>Converts the float16 stored in the low-half of the uint to a float.</summary>
    <call>
      <param type="System.UInt32" name="value" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="SharpShader.UInt2" name="value" />
      <return type="SharpShader.Vector2" />
    </call>
    <call>
      <param type="SharpShader.UInt3" name="value" />
      <return type="SharpShader.Vector3" />
    </call>
    <call>
      <param type="SharpShader.UInt4" name="value" />
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="f32tof16" csharp="F32toF16">
    <summary>Converts an input into a float16 type.</summary>
    <call>
      <param type="System.Single" name="value" />
      <return type="System.UInt32" />
    </call>
    <call>
      <param type="SharpShader.Vector2" name="value" />
      <return type="SharpShader.UInt2" />
    </call>
    <call>
      <param type="SharpShader.Vector3" name="value" />
      <return type="SharpShader.UInt3" />
    </call>
    <call>
      <param type="SharpShader.Vector4" name="value" />
      <return type="SharpShader.UInt4" />
    </call>
  </Intrinsic>

  <Intrinsic name="faceforward" csharp="FaceForward">
    <summary>Flips the surface-normal (if needed) to face in a direction opposite to i; returns the result in n.</summary>
    <call>
      <generic type="SharpShader.IVector[float]" name="T" />
      <param generic="T" name="n" />
      <param generic="T" name="i" />
      <param generic="T" name="ng" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="firstbithigh" csharp="FirstBitHigh">
    <summary>Gets the location of the first set bit starting from the highest order bit and working downward, per component.</summary>
    <call>
      <param type="System.Int32" name="value" />
      <return type="System.Int32" />
    </call>
    <call>
      <param type="SystemU.UInt32" name="value" />
      <return type="System.UInt32" />
    </call>
    <call>
      <generic type="SharpShader.IVector[Int32]" name="T" />
      <param generic="T" name="value" />
      <return generic="T" />
    </call>
    <call>
      <param type="SharpShader.UInt2" name="value" />
      <return type="SharpShader.UInt2" />
    </call>
    <call>
      <param type="SharpShader.UInt3" name="value" />
      <return type="SharpShader.UInt3" />
    </call>
    <call>
      <param type="SharpShader.UInt4" name="value" />
      <return type="SharpShader.UInt4" />
    </call>
  </Intrinsic>

  <Intrinsic name="firstbitlow" csharp="FirstBitLow">
    <summary>Returns the location of the first set bit starting from the lowest order bit and working upward, per component.</summary>
    <call>
      <param type="System.Int32" name="value" />
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IVector[UInt32]" name="T" />
      <param generic="T" name="value" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="floor">
    <summary>Returns the largest integer value that is lesss than or equal to the specified value.</summary>
    <call>
      <param type="System.Single" name ="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="fma">
    <summary>Returns the double-precision fused multiply-addition of a * b + c.</summary>
    <remarks>The fma intrinsic must support NaNs, INFs, and Denorms.</remarks>
    <call>
      <param type="System.Double" name="a" />
      <param type="System.Double" name="b" />
      <param type="System.Double" name="c" />
      <return type="System.Double" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Double]" name="T" />
      <param generic="T" name="b" />
      <param generic="T" name="c" />
      <return generic="T"  />
    </call>
  </Intrinsic>

  <Intrinsic name="fmod">
    <summary>Returns the floating-point remainder of x/y.</summary>
    <remarks>The floating-point remainder is calculated such that x = i * y + f, where i is an integer, f has the same sign as x, and the absolute value of f is less than the absolute value of y.</remarks>
    <call>
      <param type="System.Single" name="x" />
      <param type="System.Single" name="y" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <return generic="T"  />
    </call>
  </Intrinsic>

  <Intrinsic name="frac">
    <summary>Returns the fractional (or decimal) part of x; which is greater than or equal to 0 and less than 1.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T"  />
    </call>
  </Intrinsic>

  <Intrinsic name="frexp">
    <summary>Returns the mantissa and exponent of the specified floating-point value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <param type="System.Single" name="exp" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="exp" />
      <return generic="T"  />
    </call>
  </Intrinsic>

  <Intrinsic name="fwidth">
    <summary>Returns the absolute value of the partial derivatives of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T"  />
    </call>
  </Intrinsic>

  <Intrinsic name="GetRenderTargetSampleCount">
    <summary>Gets the number of samples for a render target.</summary>
    <call>
      <return type="System.UInt32" />
    </call>
  </Intrinsic>

  <Intrinsic name="GetRenderTargetSamplePosition">
    <summary>Gets the sampling position (x,y) for a given sample index.</summary>
    <call>
      <param type="System.Int32" />
      <return type="SharpShader.Int2" />
    </call>
  </Intrinsic>

  <Intrinsic name="GroupMemoryBarrier">
    <summary>Blocks execution of all threads in a group until all group shared accesses have been completed.</summary>
  </Intrinsic>

  <Intrinsic name="GroupMemoryBarrierWithSync">
    <summary>Blocks execution of all threads in a group until all group shared accesses have been completed and all threads in the group have reached this call.</summary>
  </Intrinsic>

  <Intrinsic name="InterlockedAdd">
    <summary>Performs a guaranteed atomic add of value to the dest resource variable.</summary>
    <remarks>This operation can only be performed on int or uint typed resources and shared memory variables. There are two possible uses for this function. The first is when R is a shared memory variable type. In this case, the function performs an atomic add of value to the shared memory register referenced by dest. The second scenario is when R is a resource variable type. In this scenario, the function performs an atomic add of value to the resource location referenced by dest. The overloaded function has an additional output variable which will be set to the original value of dest. This overloaded operation is only available when R is readable and writable.</remarks>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
    </call>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedAnd">
    <summary>Performs a guaranteed atomic and.</summary>
    <remarks>This operation can only be performed on int or uint typed resources and shared memory variables. There are two possible uses for this function. The first is when R is a shared memory variable type. In this case, the function performs an atomic and of value to the shared memory register referenced by dest. The second scenario is when R is a resource variable type. In this scenario, the function performs an atomic and of value to the resource location referenced by dest. The overloaded function has an additional output variable which will be set to the original value of dest. This overloaded operation is only available when R is readable and writable.</remarks>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
    </call>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedCompareExchange">
    <summary>Atomically compares the destination with the comparison value. If they are identical, the destination is overwritten with the input value. The original value is set to the destination's original value. Note: If you call InterlockedCompareExchange in a for or while compute shader loop, to properly compile, you must use the [allow_uav_condition] attribute on that loop.</summary>
    <remarks>Atomically compares the value referenced by dest with compare_value, stores value in the location referenced by dest if the values match, returns the original value of dest in original_value. This operation can only be performed on int or uint typed resources and shared memory variables. There are two possible uses for this function. The first is when R is a shared memory variable type. In this case, the function performs the operation on the shared memory register referenced by dest. The second scenario is when R is a resource variable type. In this scenario, the function performs the operation on the resource location referenced by dest. This operation is only available when R is readable and writable.</remarks>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="compare_value" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="compare_value" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedCompareStore">
    <summary>Atomically compares the destination with the comparison value. If they are identical, the destination is overwritten with the input value. The original value is set to the destination's original value. Note: If you call InterlockedCompareExchange in a for or while compute shader loop, to properly compile, you must use the [allow_uav_condition] attribute on that loop.</summary>
    <remarks>Atomically compares the value referenced by dest with compare_value and stores value in the location referenced by dest if the values match. This operation can only be performed on int or uint typed resources and shared memory variables. There are two possible uses for this function. The first is when R is a shared memory variable type. In this case, the function performs the operation on the shared memory register referenced by dest. The second scenario is when R is a resource variable type. In this scenario, the function performs the operation on the resource location referenced by dest.</remarks> 
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="compare_value" />
      <param type="System.Int32" name="value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="compare_value" />
      <param type="System.UInt32" name="value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedExchange">
    <summary>Assigns value to dest and returns the original value.</summary>
    <remarks>This operation can only be performed on scalar-typed resources and shared memory variables. There are two possible uses for this function. The first is when R is a shared memory variable type. In this case, the function performs the operation on the shared memory register referenced by dest. The second scenario is when R is a resource variable type. In this scenario, the function performs the operation on the resource location referenced by dest. This operation is only available when R is readable and writable.</remarks>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedMax">
    <summary>Performs a guaranteed atomic max.</summary>
    <remarks>This operation can only be performed on int and uint typed resources and shared memory variables. There are two possible uses for this function. The first is when R is a shared memory variable type. In this case, the function performs an atomic max of value to the shared memory register referenced by dest. The second scenario is when R is a resource variable type. In this scenario, the function performs an atomic max of value to the resource location referenced by dest. The overloaded function has an additional output variable which will be set to the original value of dest. This overloaded operation is only available when R is readable and writable.</remarks>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
    </call>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedMin">
    <summary>Performs a guaranteed atomic min.</summary>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
    </call>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedOr">
    <summary>Performs a guaranteed atomic or.</summary>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
    </call>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="InterlockedXor">
    <summary>Performs a guaranteed atomic xor.</summary>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
    </call>
    <call>
      <param type="System.Int32" name="dest" />
      <param type="System.Int32" name="value" />
      <out type="System.Int32" name="original_value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
    </call>
    <call>
      <param type="System.UInt32" name="dest" />
      <param type="System.UInt32" name="value" />
      <out type="System.UInt32" name="original_value" />
    </call>
  </Intrinsic>

  <Intrinsic name="isfinite" csharp="IsFinite">
    <summary>Determines if the specified floating-point value is finite.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Boolean" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <generic type="SharpShader.IIntrinsicValue[Boolean]" name="R" />
      <param generic="T" name="x" />
      <return generic="R" />
    </call>
  </Intrinsic>

  <Intrinsic name="isinf" csharp="IsInf">
    <summary>Determines if the specified floating-point value is infinite. Returns a value of the same size as the input, with a value set to True if the x parameter is +INF or -INF. Otherwise, False.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Boolean" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <generic type="SharpShader.IIntrinsicValue[Boolean]" name="R" />
      <param generic="T" name="x" />
      <return generic="R" />
    </call>
  </Intrinsic>

  <Intrinsic name="isnan" csharp="IsNan">
    <summary>Determines if the specified value is NAN or QNAN.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Boolean" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <generic type="SharpShader.IIntrinsicValue[Boolean]" name="R" />
      <param generic="T" name="x" />
      <return generic="R" />
    </call>
  </Intrinsic>

  <Intrinsic name="ldexp">
    <summary>Returns the result of multiplying the specified value by two, raised to the power of the specified exponent.</summary>
    <call>
      <param type="System.Single" name="x" />
      <param type="System.Single" name="exp" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="exp" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="length">
    <summary>Returns the length of the specified floating-point vector.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T"/>
      <param generic="T" name="x" />
      <return type="System.Single" />
    </call>
  </Intrinsic>

  <Intrinsic name="lerp">
    <summary>Performs a linear interpolation.</summary>
    <remarks>Linear interpolation is based on the following formula: x*(1-s) + y*s which can equivalently be written as x + s(y-x).</remarks>
    <call>
      <param type="System.Single" name="x" />
      <param type="System.Single" name="y" />
      <param type="System.Single" name="s" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <param generic="T" name="s" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="lit">
    <summary>Returns a lighting coefficient vector. This function returns a lighting coefficient vector (ambient, diffuse, specular, 1) </summary>
    <call>
      <param type="System.Single" name="n_dot_l" />
      <param type="System.Single" name="n_dot_h" />
      <param type="System.Single" name="m" />
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="log">
    <summary>Returns the base-e logarithm of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="log10">
    <summary>Returns the base-10 logarithm of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="log2">
    <summary>Returns the base-2 logarithm of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="mad">
    <summary>Performs an arithmetic multiply/add operation on three values.</summary>
    <call>
      <param type="System.Single" name="mValue" />
      <param type="System.Single" name="aValue" />
      <param type="System.Single" name="bValue" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="mValue" />
      <param type="System.Int32" name="aValue" />
      <param type="System.Int32" name="bValue" />
      <return type="System.Int32" />
    </call>
    <call>
      <param type="System.UInt32" name="mValue" />
      <param type="System.UInt32" name="aValue" />
      <param type="System.UInt32" name="bValue" />
      <return type="System.UInt32" />
    </call>
    <call>
      <generic type="SharpShader.IVector" name="T" />
      <param generic="T" name="mValue" />
      <param generic="T" name="aValue" />
      <param generic="T" name="bValue" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="max" >
    <summary>Selects the greater of x and y.</summary>
    <call>
      <param type="System.Single" name="x" />
      <param type="System.Single" name="y" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="x" />
      <param type="System.Int32" name="y" />
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="min">
    <summary>Selects the lesser of x and y.</summary>
    <call>
      <param type="System.Single" name="x" />
      <param type="System.Single" name="y" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="x" />
      <param type="System.Int32" name="y" />
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T" />
      <param generic="T" name="x" />
      <param generic="T" name="y" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="modf" csharp="ModF">
    <summary>Splits the value x into fractional and integer parts, each of which has the same sign as x. Returns the signed-fractional portion of x.</summary>
    <call>
      <param type="System.Single" name="x" />
      <param type="System.Single" name="ip" />
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="x" />
      <param type="System.Int32" name="ip" />
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T" />
      <param generic="T" name="x" />
      <out generic="T" name="integerPortion" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="msad4" csharp="MSad4">
    <summary>Compares a 4-byte reference value and an 8-byte source value and accumulates a vector of 4 sums. Each sum corresponds to the masked sum of absolute differences of a different byte alignment between the reference value and the source value.</summary>
    <call>
      <param type="System.UInt32" name="reference" />
      <param type="SharpShader.UInt2" name="source" />
      <param type="SharpShader.UInt4" name="accum" />
      <return type="SharpsShader.UInt4" />
    </call>
  </Intrinsic> 
  
  <Intrinsic name="mul">
    <call>
      <param type="System.Single" name="a"/>
      <param type="System.Single" name="b"/>
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="a"/>
      <param type="System.Int32" name="b"/>
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param type="System.Single" name="a"/>
      <param generic="T" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param type="System.Int32" name="a"/>
      <param generic="T" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="a"/>
      <param type="System.Single" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="a"/>
      <param type="System.Int32" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="V1"/>
      <generic type="SharpShader.IIntrinsicValue" name="V2"/>
      <param generic="V1" name="a"/>
      <param generic="V2" name="b"/>
      <return generic="V1" />
    </call>
  </Intrinsic>

  <Intrinsic name="noise">
    <summary>Generates a random value using the Perlin-noise algorithm. The Perlin noise value within a range between -1 and 1.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="x" />
      <return type="System.Single" />
    </call>
  </Intrinsic>

  <Intrinsic name="normalize">
    <summary>Normalizes the specified floating-point vector according to x / length(x).</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="pow">
    <summary>Returns the specified value raised to the specified power.</summary>
    <call>
      <param type="System.Single" name="value" />
      <param type="System.Single" name="power" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="value" />
      <param generic="T" name="power" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="printf" csharp="PrintF">
    <summary>Submits a custom shader message to the information queue.</summary>
    <remarks>This operation does nothing on devices that do not support it.</remarks>
    <call>
      <param type="System.String" name="format" />
      <param type="System.Object" name="args" params="true" />
    </call>
  </Intrinsic>

  <Intrinsic name="Process2DQuadTessFactorsAvg">
    <summary>Generates the corrected tessellation factors for a quad patch.</summary>
    <call>
      <param type="SharpShader.Vector4" name="rawEdgeFactors" />
      <param type="SharpShader.Vector2" name="insideScale" />
      <out type="SharpShader.Vector4" name="roundedEdgeTessFactors" />
      <out type="SharpShader.Vector2" name="roundedInsideTessFactors" />
      <out type="SharpShader.Vector2" name="unroundedInsideTessFactors" />
    </call>
  </Intrinsic>

  <Intrinsic name="Process2DQuadTessFactorsMax">
    <summary>Generates the corrected tessellation factors for a quad patch.</summary>
    <call>
      <param type="SharpShader.Vector4" name="rawEdgeFactors" />
      <param type="SharpShader.Vector2" name="insideScale" />
      <out type="SharpShader.Vector4" name="roundedEdgeTessFactors" />
      <out type="SharpShader.Vector2" name="roundedInsideTessFactors" />
      <out type="SharpShader.Vector2" name="unroundedInsideTessFactors" />
    </call>
  </Intrinsic>

  <Intrinsic name="Process2DQuadTessFactorsMin">
    <summary>Generates the corrected tessellation factors for a quad patch.</summary>
    <call>
      <param type="SharpShader.Vector4" name="rawEdgeFactors" />
      <param type="SharpShader.Vector2" name="insideScale" />
      <out type="SharpShader.Vector4" name="roundedEdgeTessFactors" />
      <out type="SharpShader.Vector2" name="roundedInsideTessFactors" />
      <out type="SharpShader.Vector2" name="unroundedInsideTessFactors" />
    </call>
  </Intrinsic>

  <Intrinsic name="ProcessIsolineTessFactors">
    <summary>Generates the rounded tessellation factors for an isoline.</summary>
    <call>
      <param type="System.Single" name="rawDetailFactor" />
      <param type="System.Single" name="rawDensityFactor" />
      <out type="System.Single" name="roundedDetailFactor" />
      <out type="System.Single" name="roundedDensityFactor" />
    </call>
  </Intrinsic>

  <Intrinsic name="ProcessQuadTessFactorsAvg">
    <summary>Generates the corrected tessellation factors for a quad patch.</summary>
    <call>
      <param type="SharpShader.Vector4" name="rawEdgeFactors" />
      <param type="System.Single" name="insideScale" />
      <out type="SharpShader.Vector4" name="roundedEdgeTessFactors" />
      <out type="SharpShader.Vector2" name="roundedInsideTessFactors" />
      <out type="SharpShader.Vector2" name="unroundedInsideTessFactors" />
    </call>
  </Intrinsic>

  <Intrinsic name="ProcessQuadTessFactorsMax">
    <summary>Generates the corrected tessellation factors for a quad patch.</summary>
    <call>
      <param type="SharpShader.Vector4" name="rawEdgeFactors" />
      <param type="System.Single" name="insideScale" />
      <out type="SharpShader.Vector4" name="roundedEdgeTessFactors" />
      <out type="SharpShader.Vector2" name="roundedInsideTessFactors" />
      <out type="SharpShader.Vector2" name="unroundedInsideTessFactors" />
    </call>
  </Intrinsic>

  <Intrinsic name="ProcessQuadTessFactorsMin">
    <summary>Generates the corrected tessellation factors for a quad patch.</summary>
    <call>
      <param type="SharpShader.Vector4" name="rawEdgeFactors" />
      <param type="System.Single" name="insideScale" />
      <out type="SharpShader.Vector4" name="roundedEdgeTessFactors" />
      <out type="SharpShader.Vector2" name="roundedInsideTessFactors" />
      <out type="SharpShader.Vector2" name="unroundedInsideTessFactors" />
    </call>
  </Intrinsic>

  <Intrinsic name="ProcessTriTessFactorsAvg">
    <summary>Generates the corrected tessellation factors for a tri patch.</summary>
    <call>
      <param type="SharpShader.Vector3" name="rawEdgeFactors" />
      <param type="System.Single" name="insideScale" />
      <out type="SharpShader.Vector3" name="roundedEdgeTessFactors" />
      <out type="System.Single" name="roundedInsideTessFactor" />
      <out type="System.Single" name="unroundedInsideTessFactor" />
    </call>
  </Intrinsic>

  <Intrinsic name="ProcessTriTessFactorsMax">
    <summary>Generates the corrected tessellation factors for a tri patch.</summary>
    <call>
      <param type="SharpShader.Vector3" name="rawEdgeFactors" />
      <param type="System.Single" name="insideScale" />
      <out type="SharpShader.Vector3" name="roundedEdgeTessFactors" />
      <out type="System.Single" name="roundedInsideTessFactor" />
      <out type="System.Single" name="unroundedInsideTessFactor" />
    </call>
  </Intrinsic>

  <Intrinsic name="ProcessTriTessFactorsMin">
    <summary>Generates the corrected tessellation factors for a tri patch.</summary>
    <call>
      <param type="SharpShader.Vector3" name="rawEdgeFactors" />
      <param type="System.Single" name="insideScale" />
      <out type="SharpShader.Vector3" name="roundedEdgeTessFactors" />
      <out type="System.Single" name="roundedInsideTessFactor" />
      <out type="System.Single" name="unroundedInsideTessFactor" />
    </call>
  </Intrinsic>

  <Intrinsic name="radians">
    <summary>Converts the specified value from degrees to radians.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="rcp">
    <summary>Calculates a fast, approximate, per-component reciprocal.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="reflect">
    <summary>Returns a reflection vector using an incident ray and a surface normal.</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="incidentVector" />
      <param generic="T" name="surfaceNormal" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="refract">
    <summary>Returns a refraction vector using an entering ray, a surface normal, and a refraction index. A floating-point, refraction vector. If the angle between the entering ray i and the surface normal n is too great for a given refraction index ?, the return value is (0,0,0).</summary>
    <call>
      <generic type="SharpShader.IVector[Single]" name="T" />
      <param generic="T" name="rayDirection" />
      <param generic="T" name="surfaceNormal" />
      <param type="System.Single" name="refractionIndex" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="reversebits" csharp="ReverseBits">
    <summary>Reverses the order of the bits, per component.</summary>
    <call>
      <param type="System.UInt32" name="value" />
      <return type="System.UInt32" />
    </call>
  </Intrinsic>

  <Intrinsic name="round">
    <summary>Rounds the specified value to the nearest integer.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="rsqrt" csharp="RSqrt">
    <summary>Returns the reciprocal of the square root of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="saturate">
    <summary>Clamps the specified value within the range of 0 to 1.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="sign">
    <summary>Returns the sign of x. Returns -1 if x is less than zero; 0 if x equals zero; and 1 if x is greater than zero.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="sin">
    <summary>Returns the sine of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="sincos" csharp="SinCos">
    <summary>Returns the sine and cosine of x.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <out generic="T" name="sine" />
      <out generic="T" name="cosine" />
    </call>
  </Intrinsic>

  <Intrinsic name="sinh" csharp="SinH">
    <summary>Returns the hyperbolic sine of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="smoothstep" csharp="SmoothStep">
    <summary>Returns a smooth Hermite interpolation between 0 and 1, if x is in the range [min, max].</summary>
    <call>
      <param type="System.Single" name="min" />
      <param type="System.Single" name="max" />
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="min" />
      <param generic="T" name="max" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="sqrt">
    <summary>Returns the square root of the specified floating-point value, per component.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="step">
    <summary>Compares two values, returning 0 or 1 based on which value is greater.</summary>
    <call>
      <param type="System.Single" name="y" />
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="y" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="tan">
    <summary>Returns the tangent of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="tanh">
    <summary>Returns the hyperbolic tangent of the specified value.</summary>
    <call>
      <param type="System.Single" name="x" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex1D">
    <summary>samples a 1D texture.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="System.Single" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="System.Single" name="texCoords"/>
      <param type="System.Single" name="ddx"/>
      <param type="System.Single" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex1Dbias">
    <summary>Samples a 1D texture after biasing the mip level by t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex1Dgrad">
    <summary>Samples a 1D texture using a gradient to select the mip level.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="System.Single" name="texCoords"/>
      <param type="System.Single" name="ddx"/>
      <param type="System.Single" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex1Dlod">
    <summary>Samples a 1D texture with mipmaps. The mipmap LOD is specified in t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex1Dproj">
    <summary>Samples a 1D texture using a projective divide; the texture coordinate is divided by t.w before the lookup takes place.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex2D">
    <summary>Samples a 2D texture.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector2" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector2" name="texCoords"/>
      <param type="SharpShader.Vector2" name="ddx"/>
      <param type="SharpShader.Vector2" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex2Dbias">
    <summary>Samples a 2D texture after biasing the mip level by t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex2Dgrad">
    <summary>Samples a 2D texture using a gradient to select the mip level.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector2" name="texCoords"/>
      <param type="SharpShader.Vector2" name="ddx"/>
      <param type="SharpShader.Vector2" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex2Dlod">
    <summary>Samples a 2D texture with mipmaps. The mipmap LOD is specified in t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex2Dproj">
    <summary>Samples a 2D texture using a projective divide; the texture coordinate is divided by t.w before the lookup takes place.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex3D">
    <summary>Samples a 3D texture.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector3" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector3" name="texCoords"/>
      <param type="SharpShader.Vector3" name="ddx"/>
      <param type="SharpShader.Vector3" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex3Dbias">
    <summary>Samples a 3D texture after biasing the mip level by t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex3Dgrad">
    <summary>Samples a 3D texture using a gradient to select the mip level.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector3" name="texCoords"/>
      <param type="SharpShader.Vector3" name="ddx"/>
      <param type="SharpShader.Vector3" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex3Dlod">
    <summary>Samples a 3D texture with mipmaps. The mipmap LOD is specified in t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="tex3Dproj">
    <summary>Samples a 3D texture using a projective divide; the texture coordinate is divided by t.w before the lookup takes place.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="texCUBE">
    <summary>Samples a cube texture.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector3" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector3" name="texCoords"/>
      <param type="SharpShader.Vector3" name="ddx"/>
      <param type="SharpShader.Vector3" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="texCUBEbias">
    <summary>Samples a cube texture after biasing the mip level by t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="texCUBEgrad">
    <summary>Samples a cube texture using a gradient to select the mip level.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector3" name="texCoords"/>
      <param type="SharpShader.Vector3" name="ddx"/>
      <param type="SharpShader.Vector3" name="ddy"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="texCUBElod">
    <summary>Samples a cube texture with mipmaps. The mipmap LOD is specified in t.w.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="texCUBEproj">
    <summary>Samples a cube texture using a projective divide; the texture coordinate is divided by t.w before the lookup takes place.</summary>
    <call>
      <param type="SharpShader.TextureSampler" name="sampler"/>
      <param type="SharpShader.Vector4" name="texCoords"/>
      <return type="SharpShader.Vector4" />
    </call>
  </Intrinsic>

  <Intrinsic name="transpose">
    <summary>Transposes the specified input matrix.</summary>
    <call>
      <generic type="SharpShader.IMatrix" name="T" />
      <param generic="T" name="x" />
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="trunc" csharp="Truncate">
    <summary>Truncates a floating-point value to the integer component.</summary>
    <call>
      <param type="System.Single" name="value" />
      <param type="System.Single" name="power" />
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue[Single]" name="T" />
      <param generic="T" name="value" />
      <param generic="T" name="power" />
      <return generic="T" />
    </call>
  </Intrinsic>
</Lexicon>
