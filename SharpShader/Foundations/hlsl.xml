<?xml version="1.0" encoding="utf-8" ?>
<Lexicon>
  <Language>HLSL</Language>
  <Word t="SharpShader.IVector`1" intrinsic="true">
    <Generic type="System.Int32" to="int" />
    <Generic type="System.UInt32" to="uint" />
    <Generic type="System.Single" to="float" />
    <Generic type="System.Double" to="double" />
    <Generic type="System.Boolean" to="bool" />
  </Word>
  <Word t="SharpShader.IMatrix`1" intrinsic="true"  uniformSizeIsSingular="false">
    <Generic type="System.Int32" to="int" />
    <Generic type="System.UInt32" to="uint" />
    <Generic type="System.Single" to="float" />
    <Generic type="System.Double" to="double" />
    <Generic type="System.Boolean" to="bool" />
  </Word>
  
  <Intrinsic name="abort">
    <comment>Submits an error message to the information queue and terminates the current draw or dispatch call being executed.</comment>
  </Intrinsic>
  
  <Intrinsic name="abs">
    <comment>Returns the absolute value of the specified value.</comment>
    <call>
      <param type="System.Int32" name="x"/>
      <return type="System.Int32"/>
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" />
      <return generic="T"/>
    </call>
  </Intrinsic>
  
  <Intrinsic name="acos">
    <comment>Returns the arccosine of the specified value.</comment>
    <call>      
      <param type="System.Single" name="x"/>
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" />
      <return generic="T"/>
    </call>
  </Intrinsic>
  
  <Intrinsic name="all">
    <comment>Determines if all components of the specified value are non-zero.</comment>
    <call>      
      <param type="System.Int32" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Boolean" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name ="x"/>
      <return type="System.Boolean"/>
    </call>
  </Intrinsic>
  
  <Intrinsic name="AllMemoryBarrier">
    <comment>Blocks execution of all threads in a group until all memory accesses have been completed.</comment>
  </Intrinsic>

  <Intrinsic name="AllMemoryBarrierWithGroupSync">
    <comment>Blocks execution of all threads in a group until all memory accesses have been completed and all threads in the group have reached this call.</comment>
  </Intrinsic>

  <Intrinsic name="any">
    <comment>Determines if any components of the specified value are non-zero.</comment>
    <call>      
      <param type="System.Int32" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <param type="System.Boolean" name="x"/>
      <return type="System.Boolean"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return type="System.Boolean"/>
    </call>  
  </Intrinsic>
  
  <Intrinsic name="asdouble" csharp="AsDouble">
    <comment>Reinterprets a cast value (two 32-bit values) into a double.</comment>
    <call>      
      <param type="System.UInt32" name="lowBits"/>
      <param type="System.UInt32" name="highBits"/>
      <return type="System.Double" />
    </call>
  </Intrinsic>
  
  <Intrinsic name="asfloat" csharp="AsFloat">
    <comment>Interprets the bit pattern of x as a floating-point number.</comment>
    <call>
      <param type="System.UInt32" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="x"/>
      <return type="System.Single" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="asin" csharp="Asin">
    <comment>Returns the arcsine of the specified value.</comment>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Single"/>
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" />
      <return generic="T"/>
    </call>
  </Intrinsic>

  <Intrinsic name="asint" csharp="AsInt">
    <comment>Interprets the bit pattern of x as an integer.</comment>
    <call>
      <param type="System.UInt32" name="x"/>
      <return type="System.Int32" />
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
  </Intrinsic>

  <Intrinsic name="asuint" csharp="AsUInt">
    <comment>Interprets the bit pattern of x as an unsigned integer, or reinterprets the bit pattern of a double as two unsigned 32-bit integers.</comment>
    <call>
      <param type="System.Int32" name="x"/>
      <return type="System.UInt32" />
    </call>
    <call>
      <param type="System.Single" name="x"/>
      <return type="System.UInt32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="x"/>
      <return generic="T" />
    </call>
    <call>
      <param type="System.Double" name="x"/>
      <out type="System.UInt32" name="lowBits"/>
      <out type="System.UInt32" name="highBits"/>
    </call>
  </Intrinsic>
  
  <Intrinsic name="atan" />
  
  <Intrinsic name="atan2" />
  
  <Intrinsic name="ceil" />
  
  <Intrinsic name="CheckAccessFullyMapped" />
  <Intrinsic name="clamp" />
  <Intrinsic name="clip" />
  <Intrinsic name="cos" />
  <Intrinsic name="cosh" />
  <Intrinsic name="countbits" />
  <Intrinsic name="cross" />
  <Intrinsic name="D3DCOLORtoUBYTE4" csharp="D3dColorToUByte4"/>
  <Intrinsic name="ddx" />
  <Intrinsic name="ddx_coarse" csharp="DdxCourse"/>
  <Intrinsic name="ddx_fine" csharp="DdxFine"/>
  <Intrinsic name="ddy" />
  <Intrinsic name="ddy_coarse" csharp="DdyCourse" />
  <Intrinsic name="ddy_fine" csharp="DdyFine"/>
  <Intrinsic name="degrees" />
  <Intrinsic name="determinant" />
  <Intrinsic name="DeviceMemoryBarrier" />
  <Intrinsic name="DeviceMemoryBarrierWithGroupSync" />
  <Intrinsic name="distance" />
  <Intrinsic name="dot" />
  <Intrinsic name="dst" />
  <Intrinsic name="errorf" />
  <Intrinsic name="EvaluateAttributeAtCentroid" />
  <Intrinsic name="EvaluateAttributeAtSample" />
  <Intrinsic name="EvaluateAttributeSnapped" />
  <Intrinsic name="exp" />
  <Intrinsic name="exp2" />
  <Intrinsic name="f16tof32" />
  <Intrinsic name="f32tof16" />
  <Intrinsic name="faceforward" />
  <Intrinsic name="firstbithigh" />
  <Intrinsic name="firstbitlow" />
  <Intrinsic name="floor" />
  <Intrinsic name="fma" />
  <Intrinsic name="fmod" />
  <Intrinsic name="frac" />
  <Intrinsic name="frexp" />
  <Intrinsic name="fwidth" />
  <Intrinsic name="GetRenderTargetSampleCount" />
  <Intrinsic name="GetRenderTargetSamplePosition" />
  <Intrinsic name="GroupMemoryBarrier" />
  <Intrinsic name="GroupMemoryBarrierWithSync" />
  <Intrinsic name="InterlockedAdd" />
  <Intrinsic name="InterlockedAnd" />
  <Intrinsic name="InterlockedCompareExchange" />
  <Intrinsic name="InterlockedCompareStore" />
  <Intrinsic name="InterlockedExchange" />
  <Intrinsic name="InterlockedMax" />
  <Intrinsic name="InterlockedMin" />
  <Intrinsic name="InterlockedOr" />
  <Intrinsic name="InterlockedXor" />
  <Intrinsic name="isfinite" />
  <Intrinsic name="isinf" />
  <Intrinsic name="isnan" />
  <Intrinsic name="ldexp" />
  <Intrinsic name="length" />
  <Intrinsic name="lerp" />
  <Intrinsic name="lit" />
  <Intrinsic name="log" />
  <Intrinsic name="log10" />
  <Intrinsic name="log2" />
  <Intrinsic name="mad" />
  <Intrinsic name="max" />
  <Intrinsic name="min" />
  <Intrinsic name="modf" />
  <Intrinsic name="msad4" />
  
  <Intrinsic name="mul">
    <call>
      <param type="System.Single" name="a"/>
      <param type="System.Single" name="b"/>
      <return type="System.Single" />
    </call>
    <call>
      <param type="System.Int32" name="a"/>
      <param type="System.Int32" name="b"/>
      <return type="System.Int32" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param type="System.Single" name="a"/>
      <param generic="T" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param type="System.Int32" name="a"/>
      <param generic="T" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="a"/>
      <param type="System.Single" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="T"/>
      <param generic="T" name="a"/>
      <param type="System.Int32" name="b"/>
      <return generic="T" />
    </call>
    <call>
      <generic type="SharpShader.IIntrinsicValue" name="V1"/>
      <generic type="SharpShader.IIntrinsicValue" name="V2"/>
      <param generic="V1" name="a"/>
      <param generic="V2" name="b"/>
      <return generic="V1" />
    </call>
  </Intrinsic>
  
  <Intrinsic name="noise" />
  <Intrinsic name="normalize" />
  <Intrinsic name="pow" />
  <Intrinsic name="printf" />
  <Intrinsic name="Process2DQuadTessFactorsAvg" />
  <Intrinsic name="Process2DQuadTessFactorsMax" />
  <Intrinsic name="Process2DQuadTessFactorsMin" />
  <Intrinsic name="ProcessIsolineTessFactors" />
  <Intrinsic name="ProcessQuadTessFactorsAvg" />
  <Intrinsic name="ProcessQuadTessFactorsMax" />
  <Intrinsic name="ProcessQuadTessFactorsMin" />
  <Intrinsic name="ProcessTriTessFactorsAvg" />
  <Intrinsic name="ProcessTriTessFactorsMax" />
  <Intrinsic name="ProcessTriTessFactorsMin" />
  <Intrinsic name="radians" />
  <Intrinsic name="rcp" />
  <Intrinsic name="reflect" />
  <Intrinsic name="refract" />
  <Intrinsic name="reversebits" />
  <Intrinsic name="round" />
  <Intrinsic name="rsqrt" />
  <Intrinsic name="saturate" />
  <Intrinsic name="sign" />
  <Intrinsic name="sincos" />
  <Intrinsic name="sinh" />
  <Intrinsic name="smoothstep" />
  <Intrinsic name="sqrt" />
  <Intrinsic name="step" />
  <Intrinsic name="tan" />
  <Intrinsic name="tanh" />
  <Intrinsic name="tex1D" />
  <Intrinsic name="tex1Dbias" />
  <Intrinsic name="tex1Dgrad" />
  <Intrinsic name="tex1Dlod" />
  <Intrinsic name="tex1Dproj" />
  <Intrinsic name="tex2D" />
  <Intrinsic name="tex2Dbias" />
  <Intrinsic name="tex2Dgrad" />
  <Intrinsic name="tex2Dlod" />
  <Intrinsic name="tex2Dproj" />
  <Intrinsic name="tex3D" />
  <Intrinsic name="tex3Dbias" />
  <Intrinsic name="tex3Dgrad" />
  <Intrinsic name="tex3Dlod" />
  <Intrinsic name="tex3Dproj" />
  <Intrinsic name="texCUBE" />
  <Intrinsic name="texCUBEbias" />
  <Intrinsic name="texCUBEgrad" />
  <Intrinsic name="texCUBElod" />
  <Intrinsic name="texCUBEproj" />
  <Intrinsic name="transpose" />
  <Intrinsic name="trunc" csharp="Truncate"/>
</Lexicon>
