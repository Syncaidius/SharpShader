<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="MultipleOutput.tt" #>

<#
	string[] componentNames = {"X","Y","Z","W"};
	string[] channelNames = {"R", "G", "B", "A"};

	string[] vectorNames = {"Vector", "UInt", "Int", "Bool", "Double"};
	string[] vectorTypes = {"float", "uint", "int", "bool", "double"};
	bool[] isIntrinsic = {true, false, true, false, false};
	bool[]  vectorOperators = {true, true, true, false, true};
	string[] operatorScalarTypes = {"int", "float", "double"};
	string[] vectorOperands =  {"+", "-", "*", "/"};

	for(int t = 0; t < vectorTypes.Length; t++)
	{
		for(int i = 2; i <= 4; i++)
		{
#>
using System.Runtime.InteropServices;

namespace SharpShader
{
<#
	string name = vectorNames[t] + i;
	string constructorParams = "";
	for(int c = 0; c < i; c++)
	{
		if(c > 0) constructorParams += ", ";
		constructorParams += $"{vectorTypes[t]} {componentNames[c].ToLower()}";
	}
#>
	[StructLayout(LayoutKind.Sequential)]
	public struct <#=name#> : IVector<<#=vectorTypes[t]#>><#=(isIntrinsic[t] ? $", IIntrinsicValue<{vectorTypes[t]}>" : "")#>
	{
<#
		for(int j = 0; j < i; j++)
		{
#>
        /// <summary>
        /// The <#=componentNames[j]#> component.
        /// </summary>
		public <#=vectorTypes[t]#> <#=componentNames[j]#>;

<#
		}

#>
        /// <summary>
        /// Creates a new instance of <see cref="<#=name#>"/>.
        /// </summary>
		public <#=name#>(<#=constructorParams#>)
		{
<#
			for(int j = 0; j < i; j++)
			{
#>
			<#=componentNames[j]#> = <#=componentNames[j].ToLower()#>;
<#
			}
#>
		}

<#
		// Generate component swizzles
		IEnumerable<string> swizzlePermutations = null;
		IEnumerable<string> compNames = componentNames.Take(i);
		for(int s = 2; s <= 4; s++)
		{
			switch (s)
			{
				case 2:
					swizzlePermutations = from a in compNames
							from b in compNames
							select string.Concat(a, b);
					break;

				case 3:
					swizzlePermutations = from a in compNames
							from b in compNames
							from c in compNames
							select string.Concat(a, b, c);
					break;

				case 4:
					swizzlePermutations = from a in compNames
							from b in compNames
							from c in compNames
							from d in compNames
							select string.Concat(a, b, c, d);
					break;
			}

			foreach(string pName in swizzlePermutations)
			{
				char[] chars = pName.ToCharArray();
				string newParams = string.Join(", ", chars);
				string pReturnType = $"{vectorNames[t]}{chars.Length}";	

				string pColName = pName;
				for(int r = 0; r  < componentNames.Length; r++)
					pColName = pColName.Replace(componentNames[r], channelNames[r]);
				char[] charsCol = pColName.ToCharArray();
				string newColParams = string.Join(", ", charsCol);

#>
		/// <summary>
		/// Returns a new <see cref="<#=vectorNames[t]+chars.Length#>"/> comprised of <#=newParams#> from the current <see cref="<#=vectorNames[t]+chars.Length#>"/>.
		/// </summary>
		public <#=pReturnType#> <#=pName#> => new <#=pReturnType#>(<#=newParams#>);

		/// <summary>
		/// Returns a new <see cref="<#=vectorNames[t]+chars.Length#>"/> comprised of <#=newColParams#> from the current <see cref="<#=vectorNames[t]+chars.Length#>"/>.
		/// </summary>
		public <#=pReturnType#> <#=pColName#> => new <#=pReturnType#>(<#=newColParams#>);

<#
			}
		}

		// Generate RGBA properties
		for(int j = 0; j < i; j++)
		{
#>
		public <#=vectorTypes[t]#> <#=channelNames[j]#>
		{
			get => <#=componentNames[j]#>;
			set => <#=componentNames[j]#> = value;
		}

<#
		}#>
<#

		// Generate operators
		if(vectorOperators[t])
		{

		for(int o = 0; o < vectorOperands.Length; o++)
		{
			string operand = vectorOperands[o];
#>
		public static <#=name#> operator <#=operand#>(<#=name#> a, <#=name#> b)
		{
			return new <#=name#>()
			{
<#
				for(int j = 0; j < i; j++)
				{
#>
				<#=componentNames[j]#> = <#=$"a.{componentNames[j]} {operand} b.{componentNames[j]}"#>,
<#
				}
#>
			};
		}
<#
		for(int ot = 0; ot < operatorScalarTypes.Length; ot++)
		{
#>
		public static <#=name#> operator <#=operand#>(<#=name#> a, <#=operatorScalarTypes[ot]#> b)
		{
			return new <#=name#>()
			{
<#
				for(int j = 0; j < i; j++)
				{
#>
				<#=componentNames[j]#> = (<#=vectorTypes[t]#>)(<#=$"a.{componentNames[j]} {operand} b"#>),
<#
				}
#>
			};
		}

		public static <#=name#> operator <#=operand#>(<#=operatorScalarTypes[ot]#> a, <#=name#> b)
		{
			return new <#=name#>()
			{
<#
				for(int j = 0; j < i; j++)
				{
#>
				<#=componentNames[j]#> = <#=(vectorTypes[t] != operatorScalarTypes[ot] ? $"({vectorTypes[t]})" : "")#>(<#=$"a {operand} b.{componentNames[j]}"#>),
<#
				}
#>
			};
		}
<#
		}
		}
		}
#>
	}
}
<#
	SaveOutput($"{name}.cs");
	}
}
#>