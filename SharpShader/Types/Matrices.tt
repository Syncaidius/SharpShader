<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="MultipleOutput.tt" #>

<#
	string[] componentNames = {"X","Y","Z","W"};
	string[] channelNames = {"R", "G", "B", "A"};

	string[] matNames = {"Matrix", "UInt", "Int", "Bool", "Double"};
	string[] matTypes = {"float", "uint", "int", "bool", "double"};
	bool[] isIntrinsic = {true, false, true, false, false};
	bool[]  matOperators = {true, true, true, false, true};
	string[] matOperands =  {"+", "-", "*", "/"};

	for(int t = 0; t < matTypes.Length; t++)
	{
		for(int colCount = 1; colCount <= 4; colCount++)
		{
			for(int rowCount = 1; rowCount <= 4; rowCount++)
			{
				string name = $"{matNames[t]}{rowCount}x{colCount}";
				string intrinsic = (isIntrinsic[t] ? $", IIntrinsicValue<{matTypes[t]}>" : "");
				string uniformDimensions = (colCount == rowCount ? $", UniformDimensions" : "");
#>
using System.Runtime.InteropServices;

namespace SharpShader
{
	/// <summary>
	///	A <#=$"{rowCount} row, {colCount} column matrix."#>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public struct <#=name#> : IMatrix<<#=matTypes[t]#>><#=(intrinsic + uniformDimensions)#>
	{
<#	
	for(int y = 1; y <= rowCount; y++)
	{
		for(int x = 1; x <= colCount; x++)
		{
#>
		/// <summary>
		///	The value at row <#=y#>, column <#=x#> of the matrix.
		/// </summary>
		public <#=$"{matTypes[t]} M{y}{x}"#>;

<#
		}
	}

	string constructorParams = "";
	for(int x = 1; x <= colCount; x++)
	{
		for(int y = 1; y <= rowCount; y++)
		{		
			if(constructorParams.Length > 0)
				constructorParams += ", ";

			constructorParams += $"{matTypes[t]} m{y}{x}";
		}
	}

#>
		/// <summary>
		/// Creates a new instance of <see cref="<#=name#>"/>.
		/// </summary>
		public <#=name#>(<#=constructorParams#>)
		{
<#
	for(int y = 1; y <= rowCount; y++)
	{
		for(int x = 1; x <= colCount; x++)
		{
#>
			<#=$"M{y}{x} = m{y}{x}"#>;
<#
		}
	}
#>
		}
	}
}


<#
				SaveOutput($"{name}.cs");
			}
		}
	}
#>
